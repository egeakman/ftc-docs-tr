# SOME DESCRIPTIVE TITLE.
# Copyright (C) FIRST
# This file is distributed under the same license as the FIRST Tech Challenge Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Tech Challenge Docs 0.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-20 03:04+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:2
msgid "Java Easy Sample OpMode for TFOD"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:5
msgid "Introduction"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:7
msgid "This tutorial describes the “Easy” version of the FTC Java Sample OpMode for TensorFlow Object Detection (TFOD)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:10
msgid "This Sample, called “ConceptTensorFlowObjectDetectionEasy.java”, can recognize official FTC game elements and provide their visible size and position. It uses standard/default TFOD settings."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:14
msgid "For the 2023-2024 game CENTERSTAGE, the game element is a hexagonal white **Pixel**. The FTC SDK software contains a TFOD model of this object, ready for recognition. That model was created with a Machine Learning process described here:"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:19
msgid ":ref:`FIRST Machine Learning Toolchain <ftc_ml/index:*first* machine learning toolchain>`."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:26
msgid "TFOD Recognition"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:26
msgid "Sample TFOD Recognition"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:28
msgid "For extra points, teams may instead use their own custom TFOD models of **Team Props**. That option is described here:"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:31
msgid ":doc:`Java Custom Model Sample OpMode for TFOD <../java_tfod_opmode_custom/java-tfod-opmode-custom>`"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:33
msgid "This tutorial shows **OnBot Java** screens. Users of **Android Studio** can follow along, since the Sample OpMode is exactly the same."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:36
msgid "A different Sample OpMode shows how to set **TFOD options**, unlike the “Easy” version which uses only standard/default TFOD settings. That version, called “ConceptTensorFlowObjectDetection.java” has good commenting to guide users in the Java **Builder pattern** for custom settings."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:42
msgid "The “Easy” OpMode covered here does not require the user to work with the Builder pattern, although the SDK does use it internally."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:46
msgid "Creating the OpMode"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:48
msgid "At the FTC OnBot Java browser interface, click on the large black **plus-sign icon** “Add File”, to open the New File dialog box."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:56
msgid "New File"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:56
msgid "New File Dialog"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:58
msgid "Specify a name for your new OpMode. Select “ConceptTensorFlowObjectDetectionEasy” as the Sample OpMode that will be the template for your new OpMode."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:62
msgid "This Sample has optional gamepad inputs, so it could be designated as a **TeleOp** OpMode (see above)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:65
msgid "Click “OK” to create your new OpMode."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:67
msgid "Android Studio users should follow the commented instructions to copy this class from the Samples folder to the Teamcode folder, with a new name. Also remove the ``@Disabled`` annotation, to make the OpMode visible in the Driver Station list."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:72
msgid "The new OpMode should appear in edit mode in your browser."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:79
msgid "Open Sample"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:79
msgid "Opening New Sample"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:81
msgid "By default, the Sample OpMode assumes you are using a webcam, configured as “Webcam 1”. If you are using the built-in camera on your Android RC phone, change the USE_WEBCAM Boolean from ``true`` to ``false`` (orange oval above)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:87
msgid "Preliminary Testing"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:89
msgid "This OpMode is ready to use – it’s the “Easy” version!"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:91
msgid "Click the “Build Everything” button (wrench icon at lower right), and wait for confirmation “BUILD SUCCESSFUL”."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:94
msgid "If Build is prevented by some other OpMode having errors/issues, they must be fixed before your new OpMode can run. For a quick fix, you could right-click on that filename and choose “Disable/Comment”. This “comments out” all lines of code, effectively removing that file from the Build. That file can be re-activated later with “Enable/Uncomment”."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:100
msgid "In Android Studio (or OnBot Java), you can open a problem class/OpMode and type **CTRL-A** and **CTRL-/** to select and “comment out” all lines of code. This is reversible with **CTRL-A** and **CTRL-/** again."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:104
msgid "Now run your new OpMode from the Driver Station (on the TeleOp list, if so designated). The OpMode should recognize any CENTERSTAGE white Pixel within the camera’s view, based on the trained TFOD model in the SDK."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:108
msgid "For a **preview** during the INIT phase, touch the Driver Station’s 3-dot menu and select **Camera Stream**."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:116
#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:116
msgid "DS Camera Stream"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:118
msgid "Camera Stream is not live video; tap to refresh the image. Use the small white arrows at lower right to expand or revert the preview size. To close the preview, choose 3-dots and Camera Stream again."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:122
msgid "After the DS START button is touched, the OpMode displays Telemetry for any recognized Pixel(s):"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:130
msgid "DS Telemetry"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:130
msgid "DS Telemetry Display"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:132
msgid "The above Telemetry shows the Label name, and TFOD recognition confidence level. It also gives the **center location** and **size** (in pixels) of the Bounding Box, which is the colored rectangle surrounding the recognized object."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:137
msgid "The pixel origin (0, 0) is at the top left corner of the image."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:139
msgid "Before and after DS START is touched, the Robot Controller provides a video preview called **LiveView**."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:147
#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:147
msgid "Sample RC LiveView"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:149
msgid "For Control Hub (with no built-in screen), plug in an HDMI monitor or learn about ``scrcpy`` (https://github.com/Genymobile/scrcpy). The above image is a LiveView screenshot via ``scrcpy``."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:153
msgid "If you don’t have a physical Pixel on hand, try pointing the camera at this image:"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:161
msgid "A Pixel"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:161
msgid "Example of a Pixel"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:165
msgid "Program Logic and Initialization"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:167
msgid "During the INIT stage (before DS START is touched), this OpMode calls a **method to initialize** the TFOD Processor and the FTC VisionPortal. After DS START is touched, the OpMode runs a continuous loop, calling a **method to display telemetry** about any TFOD recognitions. The OpMode also contains two optional features to remind teams about **CPU resource management**, useful in vision processing."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:174
msgid "Here’s the first method, to initialize the TFOD Processor and the FTC VisionPortal."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:198
msgid "For the **TFOD Processor**, the method ``easyCreateWithDefaults()`` uses standard default settings. Most teams don’t need to modify these, especially for the built-in TFOD model (white Pixel)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:202
msgid "For the **VisionPortal**, the method ``easyCreateWithDefaults()`` requires parameters for camera name and processor(s) used, but otherwise uses standard default settings such as:"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:206
msgid "camera resolution 640 x 480"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:208
msgid "non-compressed streaming format YUY2"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:210
msgid "enable RC preview (called LiveView)"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:212
msgid "if TFOD and AprilTag processors are disabled, still display LiveView (without annotations)"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:215
msgid "These are good starting values for most teams."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:218
msgid "Telemetry Method"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:220
msgid "After DS START is touched, the OpMode continuously calls this method to display telemetry about any TFOD recognitions:"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:246
msgid "In the first line of code, **all TFOD recognitions** are collected and stored in a List variable. The camera might “see” more than one game element in its field of view, even if not intended (i.e. for CENTERSTAGE with 1 game element)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:251
msgid "The ``for() loop`` then iterates through that List, handling each item, one at a time. Here the “handling” is simply processing certain TFOD fields for DS Telemetry."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:255
msgid "The ``for() loop`` calculates the pixel coordinates of the **center** of each Bounding Box (the preview’s colored rectangle around a recognized object)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:259
msgid "Telemetry is created for the Driver Station, with the object’s name (Label), recognition confidence level (percentage), and the Bounding Box’s location and size (in pixels)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:263
msgid "For competition, you want to do more than display Telemetry, and you want to exit the main OpMode loop at some point. These code modifications are discussed in another section below."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:268
msgid "Resource Management"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:270
msgid "Vision processing is “expensive”, using much **CPU capacity and USB bandwidth** to process millions of pixels streaming in from the camera."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:273
msgid "This Sample OpMode contains two optional features to remind teams about resource management. Overall, the SDK provides :ref:`over 10 tools <apriltag/vision_portal/visionportal_cpu_and_bandwidth/visionportal-cpu-and-bandwidth:visionportal cpu and bandwidth>` to manage these resources, allowing your OpMode to run effectively."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:278
msgid "As the first example, streaming images from the camera can be paused and resumed. This is a very fast transition, freeing CPU resources (and potentially USB bandwidth)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:292
msgid "Pressing the Dpad buttons, you can observe the off-and-on actions in the RC preview (LiveView), described above. In your competition OpMode, these streaming actions would be programmed, not manually controlled."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:296
msgid "The second example: after exiting the main loop, the VisionPortal is closed."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:304
msgid "Teams may consider this at any point when the VisionPortal is no longer needed by the OpMode, freeing valuable CPU resources for other tasks."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:308
msgid "Adjusting the Zoom Factor"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:310
msgid "If the object to be recognized will be more than roughly 2 feet (61 cm) from the camera, you might want to set the digital Zoom factor to a value greater than 1. This tells TensorFlow to use an artificially magnified portion of the image, which may offer more accurate recognitions at greater distances."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:323
msgid "This ``setZoom()`` method can be placed in the INIT section of your OpMode,"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:326
#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:372
msgid "immediately after the call to the ``initTfod()`` method, or"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:328
msgid "as the very last command inside the ``initTfod()`` method."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:330
msgid "This method is **not** part of the Processor Builder pattern (used in other TFOD Sample OpModes), so the Zoom factor can be set to other values during the OpMode, if desired."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:334
msgid "The “zoomed” region can be observed in the DS preview (Camera Stream) and the RC preview (LiveView), surrounded by a greyed-out area that is **not evaluated** by the TFOD Processor."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:339
msgid "Other Adjustments"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:341
msgid "The Sample OpMode uses a default **minimum confidence** level of 75%. This means the TensorFlow Processor needs a confidence level of 75% or higher, to consider an object as “recognized” in its field of view."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:345
msgid "You can see the object name and actual confidence (as a **decimal**, e.g. 0.96) near the Bounding Box, in the Driver Station preview (Camera Stream) and Robot Controller preview (Liveview)."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:354
msgid "Adjust this parameter to a higher value if you would like the processor to be more selective in identifying an object."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:357
msgid "Another option is to define, or clip, a **custom area for TFOD evaluation**, unlike ``setZoom`` which is always centered."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:368
msgid "Adjust the four margins as desired, in units of pixels."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:370
msgid "These methods can be placed in the INIT section of your OpMode,"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:374
msgid "as the very last commands inside the ``initTfod()`` method."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:376
msgid "As with ``setZoom``, these methods are **not** part of the Processor Builder pattern (used in other TFOD Sample OpModes), so they can be set to other values during the OpMode, if desired."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:381
msgid "Modifying the Sample"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:383
msgid "In this Sample OpMode, the main loop ends only when the DS STOP button is touched. For competition, teams should **modify this code** in at least two ways:"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:387
msgid "for a significant recognition, take action or store key information – inside the ``for() loop``"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:390
msgid "end the main loop based on your criteria, to continue the OpMode"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:392
msgid "As an example, you might set a Boolean variable ``isPixelDetected`` to ``true``, if a significant recognition has occurred."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:395
msgid "You might also evaluate and store which randomized Spike Mark (red or blue tape stripe) holds the white Pixel."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:398
msgid "Regarding the main loop, it could end after the camera views all three Spike Marks, or after your code provides a high-confidence result. If the camera’s view includes more than one Spike Mark position, perhaps the white Pixel’s **Bounding Box** size and location could be useful. Teams should consider how long to seek an acceptable recognition, and what to do otherwise."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:405
msgid "In any case, the OpMode should exit the main loop and continue running, using any stored information."
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:408
msgid "Best of luck this season!"
msgstr ""

#: programming_resources/vision/java_tfod_opmode/java-tfod-opmode.rst:412
msgid "Questions, comments and corrections to westsiderobotics@verizon.net"
msgstr ""
